generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String     @id @default(uuid())
  email               String     @unique
  password            String
  username            String?
  createdAt           DateTime   @default(now())
  mfaEnabled          Boolean    @default(false)
  otpCode             String?
  otpExpiresAt        DateTime?
  otpFailCount        Int        @default(0)
  otpLastAttempt      DateTime?
  otpRequestCount     Int        @default(0)
  otpRequestStart     DateTime?
  passwordFailCount   Int        @default(0)
  passwordLastAttempt DateTime?
  role                String     @default("user")
  playlists           Playlist[]
  sessions            Session[]
  artist              Artist?
}

model Artist {
  id           String        @id @default(uuid())
  name         String
  userId       String?       @unique
  user         User?         @relation(fields: [userId], references: [id])
  createdAt    DateTime      @default(now())
  trackArtists TrackArtist[]
}

model TrackArtist {
  id       String @id @default(uuid())
  track    Track  @relation(fields: [trackId], references: [id])
  trackId  String
  artist   Artist @relation(fields: [artistId], references: [id])
  artistId String
}

model Track {
  id             String          @id @default(uuid())
  title          String
  audioUrl       String
  duration       Int?
  album          String?
  genre          String?
  composer       String?
  metadata       Json?
  encryptedKey   String?
  createdAt      DateTime        @default(now())
  trackArtists   TrackArtist[]
  playlistTracks PlaylistTrack[]
}

model Playlist {
  id        String          @id @default(uuid())
  name      String
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id])
  userId    String
  tracks    PlaylistTrack[]
}

model PlaylistTrack {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  playlistId String
  track      Track    @relation(fields: [trackId], references: [id])
  trackId    String

  @@id([playlistId, trackId])
}

model Session {
  id           String   @id @default(uuid())
  refreshToken String
  pqSharedKey  String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  ip           String
  userAgent    String
  revoked      Boolean  @default(false)
  user         User     @relation(fields: [userId], references: [id])
  userId       String
}
